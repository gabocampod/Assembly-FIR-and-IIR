
AVRASM ver. 2.2.7  C:\Users\Usuario Autorizado\OneDrive\postgraduate\Dissertation\FIR_32BIT_SAMPLED_WORKING\FIR_32BIT_SAMPLED_WORKING\main.asm Wed Sep 23 23:40:52 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328pdef.inc'
C:\Users\Usuario Autorizado\OneDrive\postgraduate\Dissertation\FIR_32BIT_SAMPLED_WORKING\FIR_32BIT_SAMPLED_WORKING\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\./m328Pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328pdef.inc'
C:\Users\Usuario Autorizado\OneDrive\postgraduate\Dissertation\FIR_32BIT_SAMPLED_WORKING\FIR_32BIT_SAMPLED_WORKING\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\./m328Pdef.inc'
                                 
                                 .include "./m328Pdef.inc"		;assembly inst set for 328p
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .equ F_CPU = 16000000			;speed of processor (16M)
                                 .equ	baud	= 9600			; baudrate
                                 .equ	bps	= (F_CPU/16/baud) - 1	; baud prescale
                                 
                                 ;sample rate = 5kh
                                 ;sample time = 200us
                                 ;cycles in b/t samples = 3200
                                 ;OCRA0 VAL = 49
                                 ;timer prescaler = 64
                                 ;ADC prescalar = 32 -->432 cycles
                                 ;				 64 -->864 cycles
                                 ;free = 32adc --> 2768
                                 ;		64adc --> 2336
                                 
                                 
                                 ///////REGISTER DEFINITIONS/////////////
                                 
                                 .DEF EMPTY = R2	   ; CLEARED REGISTER
                                 .DEF LOOPING_INNER = R9   ; FOR COUNTING FIR LOOP
                                 .DEF LOOPING_OUTTER = R15 ;FOR COUNTING # OF SAMPLES
                                 
                                 .DEF RES0 = R3  	;LOWEST BYTE OF ACCUMULATOR
                                 .DEF RES1 = R4	;
                                 .DEF RES2 = R5	;
                                 .DEF RES3 = R6	;
                                 .DEF RES4 = R7	;
                                 .DEF RES5 = R8	;	HIGHIEST BYTE ACCUMULATOR
                                 
                                 .DEF COEFFL = R10	;LOWEST BYTE OF COEFFICIENT
                                 .DEF COEFFML = R11
                                 .DEF COEFFMH = R12 
                                 .DEF COEFFH = R13  ;HIGHIEST BYTE OF COEFFICIENT
                                 .DEF DATAL = R22   ;LOW BYTE OF DATA FROM ADC
                                 .DEF DATAH = R23   ;HIGH BYTE OF DATA
                                 .DEF IR0 = R16	;for intermediate results of multiplication low byte
                                 .DEF IR1 = R17
                                 .DEF IR2 = R18
                                 .DEF IR3 = R19	;highiest byte f intermediate results
                                 
                                 .DEF AL = R20	;these registers store values that will be multiplied
                                 .DEF AH = R21
                                 
                                 .DEF DATA_EXTRA = R14
                                 
                                 
                                 .def tempr = r24						;tempr register for intermediate values
                                 
                                 .equ number_of_samples = 50
                                 .equ N_Coefficients = 	25
                                 .equ coefficient_size_bytes = 4
                                 .equ buffer_size_bytes = (N_Coefficients * coefficient_size_bytes)
                                 
                                 .equ I0 = 0x0100						;I0 is adress of first coefficient
                                 .equ I1 = 0x0200						;I1 is adress of first data point
                                 .equ IRES = 0x0300						;IRES is adress where we store results
                                 .equ I1max = I1 + buffer_size_bytes		;this adress is outside data buffer by 1 position		
                                 .equ I1last = I1max - coefficient_size_bytes		;last adress on data buffer
                                 .equ number_of_tx = number_of_samples*coefficient_size_bytes
                                 
                                 
                                 /////////////INTERRUPT VECTOR DEFINITION///////////
                                 .cseg 
                                 .org 0						//on reset interrupt
000000 940c 002c                 	jmp reset	
                                 .org ADCCaddr				//on adc complete conversion interupt
00002a 940c 008f                 	jmp ISR_ADC_COMPLETE
                                 
                                 reset:
00002c 2422                      	CLR R2
                                 
                                 
                                 /////////////MACRO DEFINITIONS/////////////
                                 .macro InReg 
                                     .if @1 < 0x40 
                                         in @0, @1 
                                     .elif ((@1 >= 0x60) && (@1 < SRAM_START))  
                                         lds @0,@1 
                                     .else 
                                        .error "InReg: Invalid I/O register address" 
                                     .endif 
                                 .endmacro 
                                 
                                 ; usage: OUTREG addr, reg 
                                 .macro OUTREG 
                                     .if @0 < 0x40 
                                         out @0, @1
                                     .elif ((@0 >= 0x60) && (@0 < SRAM_START))
                                         sts @0,@1 
                                     .else 
                                        .error "OUTREG: Invalid I/O register address" 
                                     .endif 
                                 .endmacro
                                 
                                 .macro send_c 
                                 	wait3:
                                 		LDS tempr, UCSR0A			//load Uart status REG
                                 		SBRS tempr, UDRE0			//Check empty bit
                                 		rjmp wait3   				//if not empty keep waiting
                                 
                                 	OUTREG UDR0, R15
                                 .endm 
                                 
                                 
                                 .MACRO MUL16_32_SIGNED
                                 
                                 	clr	r2
                                 	muls	r23, r21		;signed byte of coeff * signed byte of data
                                 	movw	r19:r18, r1:r0
                                 	mul	r22, r20		;unsigned byte of coeff and unsigned byte of data
                                 	movw	r17:r16, r1:r0
                                 	mulsu	r23, r20		;signed byte coefficient * unsigned byte data
                                 	sbc	r19, r2
                                 	add	r17, r0
                                 	adc	r18, r1
                                 	adc	r19, r2
                                 	mulsu	r21, r22		; signed byte data * unsigned byte coeff
                                 	sbc	r19, r2
                                 	add	r17, r0
                                 	adc	r18, r1
                                 	adc	r19, r2
                                 .ENDM 
                                 
                                 .MACRO MUL16_32_UNSIGNED
                                 	mul	r23, r21		; ah * bh
                                 	movw	r19:r18, r1:r0
                                 	mul	r22, r20		; al * bl
                                 	movw	r17:r16, r1:r0
                                 	mul	r23, r20		; ah * bl
                                 	add	r17, r0
                                 	adc	r18, r1
                                 	adc	r19, r2
                                 	mul	r21, r22		; bh * al
                                 	add	r17, r0
                                 	adc	r18, r1
                                 	adc	r19, r2
                                 .ENDM
                                 
                                 .MACRO MUL16_32_SIGNED_X_UNSIGNED
                                 	MULSU R23,R21			//signed ah* unsigned bh  
                                 	movw r19:r18, r1:r0
                                 
                                 	MUL R22, R20			//unsigned al* unsigned bl  
                                 	movw r17:r16, r1:r0
                                 
                                 	MULSU R23, R20			//signed ah* unsigned bl  
                                 	sbc	r19, r2
                                 	add	r17, r0
                                 	adc	r18, r1
                                 	adc	r19, r2
                                 
                                 	MUL R22, R21			//unsigned al* unsigned bl
                                 	add	r17, r0
                                 	adc	r18, r1
                                 	adc	r19, r2
                                 .ENDM
                                 
                                 .macro MUL_SIGNED_32X32_48
                                 	
                                 	MOV R25, DATAH
                                 	MOV R24, DATAL
                                 
                                 	movw R23:R22, COEFFH:COEFFMH			//signed A3:A2 * signed B3:B2
                                 	mov R21, DATA_EXTRA						//movw R21:R20, DATA_EXTRA:DATA_EXTRA
                                 	MOV R20, DATA_EXTRA
                                 
                                 	MUL16_32_SIGNED
                                 	ADD RES4, IR0					    	//movw res5:res4, ir1:ir0		 mov r18, r0
                                 	ADC RES5, IR1
                                 
                                 	MOVW R23:R22, COEFFML:COEFFL			//uns low* unsigned low
                                 	//MOVW R21:R20, DATAH:DATAL
                                 	MOV R21, R25							
                                 	MOV R20, R24
                                 	MUL16_32_UNSIGNED
                                 	ADD RES0, IR0				//movw res1:res0, ir1:ir0	 mov r16, r0
                                 	ADC RES1, IR1
                                 	ADC RES2, IR2				//movw res3:res2, ir3:ir2	 mov r17, r1
                                 	ADC RES3, IR3
                                 	
                                 	MOVW R23:R22, COEFFH:COEFFMH		//signed coeff high* unsigned data low
                                 	MUL16_32_SIGNED_X_UNSIGNED
                                 	add res2, ir0				//add r17, r0			
                                 	adc res3, ir1
                                 	adc res4, ir2				//adc r18, r1
                                 	adc res5, ir3
                                 
                                 	MOV R23, DATA_EXTRA			//	 //signed data high* unsigned coeff low
                                 	MOV R22, DATA_EXTRA
                                 	MOVW R21:R20, COEFFML:COEFFL
                                 	MUL16_32_SIGNED_X_UNSIGNED
                                 	add res2, ir0				//add r17, r0			
                                 	adc res3, ir1
                                 	adc res4, ir2				//adc r18, r1
                                 	adc res5, ir3
                                 .endm
                                 
                                 
                                 //////////////////SET UP COEFFICIENTS AND POINTERS/////////////////
                                 
                                 ;SET COEFFICIENTS
                                 
00002d 940e 018e                 	call set_coefficients_FIR_32
                                 
                                 ;CLEAN THE DATA BUFFER
                                 
00002f e0c0                      	LDI YL, LOW(I1)	; set inderect register Y (29:28) to adress of 1st data point
000030 e0d2                      	LDI YH, HIGH(I1)
                                 
000031 e189                      	ldi tempr, N_Coefficients
                                 	cleaning_data:
000032 9229                      		ST Y+, EMPTY
000033 9229                      		ST Y+, EMPTY
000034 9229                      		ST Y+, EMPTY
000035 9229                      		ST Y+, EMPTY
000036 958a                      		dec tempr
000037 f7d1                      	BRNE cleaning_data
                                 
                                 ;SET ALL POINTERS TO CORRECT ADRESSES
                                 
000038 e0a0                      	LDI XL,LOW(I0)		;set inderect register X (27:26) to adress of 1st coefficient 
000039 e0b1                      	LDI XH,HIGH(I0)
                                 
00003a e0c0                      	LDI YL, LOW(I1)		; set inderect register Y (29:28) to adress of 1st data point
00003b e0d2                      	LDI YH, HIGH(I1)
                                 
00003c e0e0                      	LDI ZL, LOW(IRES)	; set inderect register Z (31:30) to memory locations that will store result
00003d e0f3                      	LDI ZH, HIGH(IRES)
                                 
                                 
                                 //////////////SET UP UART, ADC AND TIMER SECTION/////////////////
                                 
                                 ;INIT UART
00003e e090                      	LDI R25, HIGH(bps)
00003f e687                      	LDI R24, LOW(bps)
                                 
000040 9390 00c5                 	OUTREG UBRR0H, R25		// Set Baud rate
000042 9380 00c4                 	OUTREG UBRR0L, R24		
                                 	
000044 e188                      	ldi r24, (1<< TXEN0) | 	(1<< RXEN0)		  // Enable transmitter and receivier 
000045 9380 00c1                 	OUTREG UCSR0B,r24
                                 
000047 e086                      	ldi r24, (0<<USBS0) | (1<<UCSZ01)	|	(1<<UCSZ00)	  // frame format: 8data, 1 stop bit
000048 9380 00c2                 	OUTREG UCSR0C,r24
                                 
                                 ;turn off digital buffer at adc pin
00004a e081                      	LDI tempr,(1<<ADC0D)
00004b 9380 007e                 	STS DIDR0, tempr
                                 
                                 ;SET_UP_ADC_W_TRIGGER
                                 
00004d e085                      	LDI tempr, (1<<ADPS2) | (0<<ADPS1) |(1<<ADPS0)		//set prescaler (110 for clk/64)
00004e 9380 007a                 	STS ADCSRA, tempr
                                 
000050 e480                      	LDI tempr, (1<<REFS0) | (0<<ADLAR)					//set reference voltage, select channel and right justify
000051 9380 007c                 	STS ADMUX, tempr
                                 
000053 9180 007a                 	LDS tempr, ADCSRA 
000055 6280                      	ORI tempr, (1<<ADATE) 								// enable autotriggering
000056 9380 007a                 	STS ADCSRA, tempr
                                 
000058 9180 007a                 	LDS tempr, ADCSRA									//enable ADC
00005a 6880                      	ORI tempr, (1<<ADEN)
00005b 9380 007a                 	STS ADCSRA, tempr
                                 
00005d 9180 007a                 	LDS tempr, ADCSRA									//enable trigger for ADC conversion complete
00005f 6088                      	ORI tempr, (1<<ADIE)
000060 9380 007a                 	STS ADCSRA, tempr
                                 
000062 e083                      	LDI tempr, (0<<ADTS2) | (1<<ADTS1) | (1 << ADTS0)	//set source that decides when an new ADC conversion starts  (011 for timer)  (000 free running)
000063 9380 007b                 	STS ADCSRB, tempr 
                                 
                                 ;Init timer 0 and compA
                                 
000065 e080                      	ldi tempr, 0x00			//clear contents of timer 0
000066 bd86                      	OUT TCNT0, tempr
                                 
000067 e381                      	ldi tempr, 49			//set required value to output compare register
000068 bd87                      	OUT OCR0A,tempr
                                 
000069 e082                      	ldi tempr, (1<<WGM01)	//set timer for ctc (clear timer when matches compare) mode (WGM01 = 1)
00006a bd84                      	OUT TCCR0A,tempr	
                                 
                                 ;START_TIMER0
                                 
00006b e083                      	LDI tempr, (0<<CS02) | (1<<CS01) | (1<<CS00)	//select prescalar using bits 2,1,0 of TCCR0B and start timer.   (011 FOR CLK/64) (010 for clk/8)
00006c bd85                      	OUT TCCR0B, tempr
                                 
                                 
                                 ;START FIRST CONVERSION ADC
00006d 9180 007a                 	LDS tempr, ADCSRA									
00006f 6480                      	ORI tempr, (1<<ADSC)
000070 9380 007a                 	STS ADCSRA, tempr
                                 
                                 ;enable global interrupts
000072 9478                      	SEI
                                 
                                 
000073 efaf                      LDI XL, 0XFF			//load wrong value to XL to check for first conversion
000074 e382                      LDI tempr, number_of_samples
000075 2ef8                      MOV looping_outter, TEMPR
                                 main:							//LOOP UNTIL YOU TAKE ALL SAMPLES
                                 	
000076 14f2                      	CP looping_outter, EMPTY
                                 
000077 f7f1                      BRNE main
                                 
                                 ;Disable global interrupts
000078 94f8                      	CLI
                                 
                                 ;Disable ADC 
000079 e080                      	LDI tempr,(0<<ADEN) | (0<<ADATE) | (0<<ADIE) 
00007a 9380 007a                 	STS ADCSRA, tempr
                                 
                                 ;Stop timer
00007c e080                      	LDI tempr, (0<<CS00) | (0<<CS01) | (0<<CS02)	
00007d bd85                      	OUT TCCR0B, tempr
                                 
                                 ;SEND RESULTS via USART
                                 
00007e e0e0                      	LDI ZL, LOW(IRES)		//make Z point to first result again 
00007f e0f3                      	LDI ZH, HIGH(IRES)
                                 
000080 e000                      	LDI R16, 0				//R16 holds how many results we have sent
000081 ec18                      	LDI R17, number_of_tx	//R17 holds total number of results taken
                                 
                                 
                                 start_TX:
                                 
                                 	wait:
000082 1701                      		CP	R16, R17
000083 f049                      		BREQ finish_TX
000084 9180 00c0                 		LDS tempr, UCSR0A			//load Uart status REG
000086 ff85                      		SBRS tempr, UDRE0			//Check empty bit
000087 cffa                      		rjmp wait    				//if not empty keep waiting
                                 
000088 90f1                      	LD R15, Z+				//load value pointed by Z and send it out
000089 92f0 00c6                 	STS UDR0, R15
                                 	 
00008b 9503                      	INC R16				//Increment the "number of results sent" counter
00008c cff5                      	rjmp start_TX
                                 
                                 finish_TX:
                                 
                                 //infinite loop. end of program
                                 	end_all:		
                                 
00008d 940c 008d                 	jmp end_all
                                 
                                 
                                  //////////ISR DEFINITIONS/////////////
                                 
                                 ISR_ADC_COMPLETE:
                                 
00008f e082                        LDI tempr, (1<<OCF0A)		//clear timer interrupt flag
000090 bb85                        OUTREG TIFR0, tempr 
                                 
000091 3faf                        CPI XL, 0xFF			//check if it's first conversion
000092 f009                        BREQ first_conversion
000093 c006                        rjmp second_conversion_and_highier
                                 	
                                 first_conversion:
000094 9160 0078                 	LDS DATAL, ADCL
000096 9170 0079                 	LDS DATAH, ADCH		;dummy load
000098 e0a0                      	LDI XL, LOW(I0)		;set correct value of XL
000099 c0ec                      	rjmp return_ISR
                                 
                                 second_conversion_and_highier:
00009a 9160 0078                 	LDS DATAL, ADCL					;store ADC low value on r20
00009c 9170 0079                 	LDS DATAH, ADCH					;Store high value on r21  
                                 
00009e 5060                      	SUBI DATAL, low(512)
00009f 4072                      	SBCI DATAH, HIGH(512)
                                 
                                 ;set value of 2 upper bytes data_extra (0xff or 0x00)
0000a0 2f87                      	MOV tempr, DATAH			
0000a1 7880                      	ANDI tempr, 0x80
0000a2 ff87                      	SBRS tempr, 7					
0000a3 c003                      	rjmp its_positive	
0000a4 ef8f                      		LDI tempr, 0XFF				//if set then it's negative so choose 0xFF
0000a5 2ee8                      		MOV DATA_EXTRA, TEMPR
0000a6 c002                      		rjmp continue				//skip its_positive part	
                                 	its_positive:
0000a7 e080                      		LDI tempr, 0X00				//if positive choose 0x00
0000a8 2ee8                      		MOV  DATA_EXTRA,TEMPR
                                 	continue:
                                 
                                 ;Store read value in DATA BUFFER as newest value
0000a9 92e9                      	ST Y+, DATA_EXTRA
0000aa 92e9                      	ST Y+, DATA_EXTRA	
0000ab 9379                      	ST Y+, DATAH						
0000ac 9369                      	ST Y+, DATAL
                                 
                                  ;if Y> max_adress_data then set Y to first adress data
0000ad 018e                      	MOVW R17:R16, YH:YL    ; R17:16 = R29:28  which is the adress of data pointed by Y
0000ae 5604                      	SUBI R16, LOW(I1MAX)	 ; check if current adress is smaller than max
0000af 4012                      	SBCI R17, HIGH(I1MAX)
0000b0 f40a                      	BRPL GO_BACK_TO_FIRST_ADRESS  ; if current adress is larger result will be positive and branch will be taken 
0000b1 c002                      	rjmp Keep_going
                                 	GO_BACK_TO_FIRST_ADRESS:
0000b2 e0d2                      		LDI YH, HIGH(I1)
0000b3 e0c0                      		LDI YL, LOW(I1)
                                 	Keep_going:					  ;return from branch
                                 
                                 ;LOAD FIRST COEFFICIENT (4 BYTES)
0000b4 90dd                      	LD COEFFH, X+	 
0000b5 90cd                      	LD COEFFMH, X+
0000b6 90bd                      	LD COEFFML, X+	
0000b7 90ad                      	LD COEFFL, X+	
                                 
                                 ;CLEAR 48 BIT ACCUMULATOR
0000b8 2433                      	CLR RES0
0000b9 2444                      	CLR RES1
0000ba 2455                      	CLR RES2			 
0000bb 2466                      	CLR RES3
0000bc 2477                      	CLR RES4
0000bd 2488                      	CLR RES5
                                 
                                 ;START FIR MAC LOOP
0000be e188                      	LDI tempr, (N_Coefficients-1)		;looping counter for FIR
0000bf 2e98                      	MOV LOOPING_INNER, tempr
                                 
                                 LC0:
                                 	;MAC
0000c0 2f97
0000c1 2f86
0000c2 01b6
0000c3 2d5e
0000c4 2d4e
0000c5 2422
0000c6 0275
0000c7 0190
0000c8 9f64
0000c9 0180
0000ca 0374
0000cb 0932
0000cc 0d10
0000cd 1d21
0000ce 1d32
0000cf 0356
0000d0 0932
0000d1 0d10
0000d2 1d21
0000d3 1d32
0000d4 0e70
0000d5 1e81
0000d6 01b5
0000d7 2f59
0000d8 2f48
0000d9 9f75
0000da 0190
0000db 9f64
0000dc 0180
0000dd 9f74
0000de 0d10
0000df 1d21
0000e0 1d32
0000e1 9f56
0000e2 0d10
0000e3 1d21
0000e4 1d32
0000e5 0e30
0000e6 1e41
0000e7 1e52
0000e8 1e63
0000e9 01b6
0000ea 0375
0000eb 0190
0000ec 9f64
0000ed 0180
0000ee 0374
0000ef 0932
0000f0 0d10
0000f1 1d21
0000f2 1d32
0000f3 9f65
0000f4 0d10
0000f5 1d21
0000f6 1d32
0000f7 0e50
0000f8 1e61
0000f9 1e72
0000fa 1e83
0000fb 2d7e
0000fc 2d6e
0000fd 01a5
0000fe 0375
0000ff 0190
000100 9f64
000101 0180
000102 0374
000103 0932
000104 0d10
000105 1d21
000106 1d32
000107 9f65
000108 0d10
000109 1d21
00010a 1d32
00010b 0e50
00010c 1e61
00010d 1e72
00010e 1e83                      		MUL_SIGNED_32X32_48
                                 	
                                 	;LOAD THE NEXT DATA VALUE
00010f 90e9                      		LD DATA_EXTRA, Y+
000110 90e9                      		LD DATA_EXTRA, Y+
000111 9179                      		LD DATAH, Y+			
000112 9169                      		LD DATAL, Y+
                                 
                                 	;LOAD THE NEXT COEFFICIENT						
000113 90dd                      		LD	COEFFH, X+			 				 
000114 90cd                      		LD	COEFFMH, X+
000115 90bd                      		LD  COEFFML, X+	
000116 90ad                      		LD  COEFFL, X+	
                                 
                                 
                                 	;if Y> max_adress_data then set Y to first adress data
000117 018e                      		MOVW R17:R16, R29:R28    ; R17:16 = R29:28  which is the adress of data pointed by Y
000118 5604                      		SUBI R16, LOW(I1MAX)	 ; check if current adress is smaller than max
000119 4012                      		SBCI R17, HIGH(I1MAX)
00011a f00a                      		BRMI keep_going_buffer	  ; if current address is smaller than max, result is negative and we skip the jump
00011b c06c                      			rjmp GO_BACK_TO_FIRST_ADRESS_BUFFER ; if current adress is larger result will be positive and we take the jump
                                 		Keep_going_buffer:						;return from branch
                                 				
00011c 949a                      	DEC LOOPING_INNER
00011d f009                      BREQ last_mac		;loop until looping = 0 
00011e cfa1                      RJMP LC0
                                 
                                 last_mac:
                                 
                                 ;LAS MAC DONE OUTSIDE LOOP
00011f 2f97
000120 2f86
000121 01b6
000122 2d5e
000123 2d4e
000124 2422
000125 0275
000126 0190
000127 9f64
000128 0180
000129 0374
00012a 0932
00012b 0d10
00012c 1d21
00012d 1d32
00012e 0356
00012f 0932
000130 0d10
000131 1d21
000132 1d32
000133 0e70
000134 1e81
000135 01b5
000136 2f59
000137 2f48
000138 9f75
000139 0190
00013a 9f64
00013b 0180
00013c 9f74
00013d 0d10
00013e 1d21
00013f 1d32
000140 9f56
000141 0d10
000142 1d21
000143 1d32
000144 0e30
000145 1e41
000146 1e52
000147 1e63
000148 01b6
000149 0375
00014a 0190
00014b 9f64
00014c 0180
00014d 0374
00014e 0932
00014f 0d10
000150 1d21
000151 1d32
000152 9f65
000153 0d10
000154 1d21
000155 1d32
000156 0e50
000157 1e61
000158 1e72
000159 1e83
00015a 2d7e
00015b 2d6e
00015c 01a5
00015d 0375
00015e 0190
00015f 9f64
000160 0180
000161 0374
000162 0932
000163 0d10
000164 1d21
000165 1d32
000166 9f65
000167 0d10
000168 1d21
000169 1d32
00016a 0e50
00016b 1e61
00016c 1e72
00016d 1e83                      	MUL_SIGNED_32X32_48
                                 
                                 ;DOWNSCALE RSULT
00016e 1c66                      	ROL RES3
00016f 1c77                      	ROL RES4
000170 1c88                      	ROL RES5
                                 
                                 ;CHECK SIGN OF RESULT AND ADD IT TO LAST 16 BITS
000171 2d88                      	MOV tempr, RES5			
000172 7880                      	ANDI tempr, 0x80
000173 ff87                      	SBRS tempr, 7					
000174 c003                      	rjmp its_positive2	
000175 ef8f                      		LDI tempr, 0XFF				//if set then it's negative so choose 0xFF
000176 2ee8                      		MOV DATA_EXTRA, TEMPR
000177 c002                      		rjmp continue2				//skip its_positive part	
                                 	its_positive2:
000178 e080                      		LDI tempr, 0X00				//if positive choose 0x00
000179 2ee8                      		MOV  DATA_EXTRA,TEMPR
                                 	continue2:
                                 
                                 ;STORE USEFUL 16 bits OF RESULTS (sign extension already stored)
00017a 92e1                      	ST Z+, DATA_EXTRA	
00017b 92e1                      	ST Z+, DATA_EXTRA
00017c 9281                      	ST Z+, RES5		
00017d 9271                      	ST Z+, RES4
                                 
                                 ;AGAIN set inderect register X (27:26) to adress of 1st coefficient 
00017e e0a0                      	LDI XL,LOW(I0)			
00017f e0b1                      	LDI XH,HIGH(I0)	
                                 
                                 ;check if current adress is less than 1st location in data buffer
                                 
000180 50c4                      	SUBI R28, coefficient_size_bytes			;Make Y point to nbytes less to overwrite oldest value
000181 018e                      		MOVW R17:R16, R29:R28    ; R17:16 <-- R29:28  which is the adress of data pointed by Y
000182 5000                      		SUBI R16, LOW(I1)		; check if current adress is smaller than first adress on buffer
000183 4012                      		SBCI R17, HIGH(I1)
000184 f032                      		BRMI GO_LAST_ADRESS_BUFFER			;if current adress is smaller result will be negative and branch will be taken 
                                 	Keep_going_buffer_last:				;return from branch
                                 	
000185 94fa                        dec looping_OUTTER	//Finished taking sample so decrease global counter
                                 return_ISR:
000186 14f2                      CP looping_outter, EMPTY
000187 9518                      reti
                                 
                                 
                                 /////////BRANCHES ///////////////
                                 
                                 ;CODE TO SET A POINTER TO FIRST ADRESS ON DATA BUFFER
                                 GO_BACK_TO_FIRST_ADRESS_BUFFER:
000188 e0d2                      LDI R29, HIGH(I1)
000189 e0c0                      LDI R28, LOW(I1)
00018a cf91                      rjmp Keep_going_buffer
                                 
                                 ;code to go to last adress on data buffer
                                 GO_LAST_ADRESS_BUFFER:
00018b e0d2                      	LDI R29, HIGH(I1last)
00018c e6c0                      	LDI R28, LOW(I1last)
00018d cff7                      rjmp Keep_going_buffer_last
                                 
                                 
                                 /////////FUNCTION DEFINITIONS//////////
                                 set_coefficients_FIR_32:
00018e e0a0                      	LDI XL,LOW(I0)		
00018f e0b1                      	LDI XH,HIGH(I0)
                                 
000190 ef7f                      	LDI R23, 0xFF				;COEFFICIENT
000191 ef65                      	LDI R22, 0xF5
000192 e156                          LDI R21, high(-715243)	
000193 e145                      	LDI R20, low(-715243)	
                                 
000194 937d                      	ST X+, R23					;set to memory
000195 936d                      	ST X+, R22
000196 935d                      	ST X+, R21					
000197 934d                      	ST X+, R20
                                 
000198 ef7f                      	LDI R23, 0xff				;COEFFICIENT
000199 e966                      	LDI R22, 0x96
00019a e856                          LDI R21, high(-6912262)	
00019b ef4a                      	LDI R20, low(-6912262)	
                                 
00019c 937d                      	ST X+, R23					;set to memory
00019d 936d                      	ST X+, R22
00019e 935d                      	ST X+, R21					
00019f 934d                      	ST X+, R20
                                 
                                 
0001a0 e070                      	LDI R23, 0x00				;COEFFICIENT
0001a1 e165                      	LDI R22, 0x15
0001a2 ee5e                          LDI R21, high(1437261)	
0001a3 e44d                      	LDI R20, low(1437261)	
                                 
0001a4 937d                      	ST X+, R23					;set to memory
0001a5 936d                      	ST X+, R22
0001a6 935d                      	ST X+, R21					
0001a7 934d                      	ST X+, R20
                                 
0001a8 e071                      	LDI R23, 0x01				;COEFFICIENT
0001a9 e16c                      	LDI R22, 0x1c
0001aa e25e                          LDI R21, high(18624123)	
0001ab e74b                      	LDI R20, low(18624123)	
                                 
0001ac 937d                      	ST X+, R23					;set to memory
0001ad 936d                      	ST X+, R22
0001ae 935d                      	ST X+, R21					
0001af 934d                      	ST X+, R20
                                 
0001b0 ef7f                      	LDI R23, 0xFF				;COEFFICIENT
0001b1 ed62                      	LDI R22, 0xD2
0001b2 ef5e                          LDI R21, high(-2949560)	
0001b3 e448                      	LDI R20, low(-2949560)	
                                 
0001b4 937d                      	ST X+, R23					;set to memory
0001b5 936d                      	ST X+, R22
0001b6 935d                      	ST X+, R21					
0001b7 934d                      	ST X+, R20
                                 
0001b8 ef7d                      	LDI R23, 0xFD				;COEFFICIENT
0001b9 e56e                      	LDI R22, 0x5E
0001ba e65b                          LDI R21, high(-44143861)	
0001bb e04b                      	LDI R20, low(-44143861)	
                                 
0001bc 937d                      	ST X+, R23					;set to memory
0001bd 936d                      	ST X+, R22
0001be 935d                      	ST X+, R21					
0001bf 934d                      	ST X+, R20
                                 
0001c0 e070                      	LDI R23, 0x00				;COEFFICIENT
0001c1 e46a                      	LDI R22, 0x4A
0001c2 e754                          LDI R21, high(4879368)	
0001c3 e048                      	LDI R20, low(4879368)	
                                 
0001c4 937d                      	ST X+, R23					;set to memory
0001c5 936d                      	ST X+, R22
0001c6 935d                      	ST X+, R21					
0001c7 934d                      	ST X+, R20
                                 
0001c8 e075                      	LDI R23, 0x05				;COEFFICIENT
0001c9 e86c                      	LDI R22, 0x8C
0001ca e355                          LDI R21, high(93074694)	
0001cb e046                      	LDI R20, low(93074694)	
                                 
0001cc 937d                      	ST X+, R23					;set to memory
0001cd 936d                      	ST X+, R22
0001ce 935d                      	ST X+, R21					
0001cf 934d                      	ST X+, R20
                                 
0001d0 ef7f                      	LDI R23, 0xFF				;COEFFICIENT
0001d1 e969                      	LDI R22, 0x99
0001d2 e053                          LDI R21, high(-6749264)	
0001d3 eb40                      	LDI R20, low(-6749264)	
                                 
0001d4 937d                      	ST X+, R23					;set to memory
0001d5 936d                      	ST X+, R22
0001d6 935d                      	ST X+, R21					
0001d7 934d                      	ST X+, R20
                                 
0001d8 ef74                      	LDI R23, 0xF4				;COEFFICIENT
0001d9 e16e                      	LDI R22, 0x1E
0001da ed55                          LDI R21, high(-199305834)	
0001db e946                      	LDI R20, low(-199305834)	
                                 
0001dc 937d                      	ST X+, R23					;set to memory
0001dd 936d                      	ST X+, R22
0001de 935d                      	ST X+, R21					
0001df 934d                      	ST X+, R20
                                 
                                 
0001e0 e070                      	LDI R23, 0x00				;COEFFICIENT
0001e1 e76b                      	LDI R22, 0x7B
0001e2 e858                          LDI R21, high(8095876)	
0001e3 e844                      	LDI R20, low(8095876)	
                                 
0001e4 937d                      	ST X+, R23					;set to memory
0001e5 936d                      	ST X+, R22
0001e6 935d                      	ST X+, R21					
0001e7 934d                      	ST X+, R20
                                 
0001e8 e278                      	LDI R23, 0x28				;COEFFICIENT
0001e9 e266                      	LDI R22, 0x26
0001ea ed54                          LDI R21, high(673633432)	
0001eb e948                      	LDI R20, low(673633432)	
                                 
0001ec 937d                      	ST X+, R23					;set to memory
0001ed 936d                      	ST X+, R22
0001ee 935d                      	ST X+, R21					
0001ef 934d                      	ST X+, R20
                                 
0001f0 e37f                      	LDI R23, 0x3F				;COEFFICIENT
0001f1 e76c                      	LDI R22, 0x7C
0001f2 ef5f                          LDI R21, high(1065156607)	
0001f3 ef4f                      	LDI R20, low(1065156607)	
                                 
0001f4 937d                      	ST X+, R23					;set to memory
0001f5 936d                      	ST X+, R22
0001f6 935d                      	ST X+, R21					
0001f7 934d                      	ST X+, R20
                                 
0001f8 e278                      	LDI R23, 0x28				;COEFFICIENT
0001f9 e266                      	LDI R22, 0x26
0001fa ed54                          LDI R21, high(673633432)	
0001fb e948                      	LDI R20, low(673633432)	
                                 
0001fc 937d                      	ST X+, R23					;set to memory
0001fd 936d                      	ST X+, R22
0001fe 935d                      	ST X+, R21					
0001ff 934d                      	ST X+, R20
                                 
000200 e070                      	LDI R23, 0x00				;COEFFICIENT
000201 e76b                      	LDI R22, 0x7B
000202 e858                          LDI R21, high(8095876)	
000203 e844                      	LDI R20, low(8095876)	
                                 
000204 937d                      	ST X+, R23					;set to memory
000205 936d                      	ST X+, R22
000206 935d                      	ST X+, R21					
000207 934d                      	ST X+, R20
                                 
000208 ef74                      	LDI R23, 0xF4				;COEFFICIENT
000209 e16e                      	LDI R22, 0x1E
00020a ed55                          LDI R21, high(-199305834)	
00020b e946                      	LDI R20, low(-199305834)	
                                 
00020c 937d                      	ST X+, R23					;set to memory
00020d 936d                      	ST X+, R22
00020e 935d                      	ST X+, R21					
00020f 934d                      	ST X+, R20
                                 
000210 ef7f                      	LDI R23, 0xFF				;COEFFICIENT
000211 e969                      	LDI R22, 0x99
000212 e053                          LDI R21, high(-6749264)	
000213 eb40                      	LDI R20, low(-6749264)	
                                 
000214 937d                      	ST X+, R23					;set to memory
000215 936d                      	ST X+, R22
000216 935d                      	ST X+, R21					
000217 934d                      	ST X+, R20
                                 
000218 e075                      	LDI R23, 0x05				;COEFFICIENT
000219 e86c                      	LDI R22, 0x8C
00021a e355                          LDI R21, high(93074694)	
00021b e046                      	LDI R20, low(93074694)	
                                 
00021c 937d                      	ST X+, R23					;set to memory
00021d 936d                      	ST X+, R22
00021e 935d                      	ST X+, R21					
00021f 934d                      	ST X+, R20
                                 
000220 e070                      	LDI R23, 0x00				;COEFFICIENT
000221 e46a                      	LDI R22, 0x4A
000222 e754                          LDI R21, high(4879368)	
000223 e048                      	LDI R20, low(4879368)	
                                 
000224 937d                      	ST X+, R23					;set to memory
000225 936d                      	ST X+, R22
000226 935d                      	ST X+, R21					
000227 934d                      	ST X+, R20
                                 
000228 ef7d                      	LDI R23, 0xFD				;COEFFICIENT
000229 e56e                      	LDI R22, 0x5E
00022a e65b                          LDI R21, high(-44143861)	
00022b e04b                      	LDI R20, low(-44143861)	
                                 
00022c 937d                      	ST X+, R23					;set to memory
00022d 936d                      	ST X+, R22
00022e 935d                      	ST X+, R21					
00022f 934d                      	ST X+, R20
                                 
000230 ef7f                      	LDI R23, 0xFF				;COEFFICIENT
000231 ed62                      	LDI R22, 0xD2
000232 ef5e                          LDI R21, high(-2949560)	
000233 e448                      	LDI R20, low(-2949560)	
                                 
000234 937d                      	ST X+, R23					;set to memory
000235 936d                      	ST X+, R22
000236 935d                      	ST X+, R21					
000237 934d                      	ST X+, R20
                                 
000238 e071                      	LDI R23, 0x01				;COEFFICIENT
000239 e16c                      	LDI R22, 0x1c
00023a e25e                          LDI R21, high(18624123)	
00023b e74b                      	LDI R20, low(18624123)	
                                 
00023c 937d                      	ST X+, R23					;set to memory
00023d 936d                      	ST X+, R22
00023e 935d                      	ST X+, R21					
00023f 934d                      	ST X+, R20
                                 
000240 e070                      	LDI R23, 0x00				;COEFFICIENT
000241 e165                      	LDI R22, 0x15
000242 ee5e                          LDI R21, high(1437261)	
000243 e44d                      	LDI R20, low(1437261)	
                                 
000244 937d                      	ST X+, R23					;set to memory
000245 936d                      	ST X+, R22
000246 935d                      	ST X+, R21					
000247 934d                      	ST X+, R20
                                 
000248 ef7f                      	LDI R23, 0xff				;COEFFICIENT
000249 e966                      	LDI R22, 0x96
00024a e856                          LDI R21, high(-6912262)	
00024b ef4a                      	LDI R20, low(-6912262)	
                                 
00024c 937d                      	ST X+, R23					;set to memory
00024d 936d                      	ST X+, R22
00024e 935d                      	ST X+, R21					
00024f 934d                      	ST X+, R20
                                 
000250 ef7f                      		LDI R23, 0xFF				;COEFFICIENT
000251 ef65                      	LDI R22, 0xF5
000252 e156                          LDI R21, high(-715243)	
000253 e145                      	LDI R20, low(-715243)	
                                 
000254 937d                      	ST X+, R23					;set to memory
000255 936d                      	ST X+, R22
000256 935d                      	ST X+, R21					
000257 934d                      	ST X+, R20
                                 
                                 
000258 9508                      ret
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  : 108 y  :  12 z  :   5 r0 :  32 r1 :  32 r2 :  33 r3 :   3 r4 :   3 
r5 :   7 r6 :   8 r7 :   9 r8 :  10 r9 :   2 r10:   6 r11:   6 r12:   6 
r13:   6 r14:  18 r15:   6 r16:  25 r17:  40 r18:  30 r19:  38 r20:  72 
r21:  72 r22:  81 r23:  82 r24:  66 r25:   6 r26:   6 r27:   3 r28:   9 
r29:   8 r30:   2 r31:   2 
Registers used: 35 out of 35 (100.0%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  52 add   :  24 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   2 
brne  :   2 brpl  :   1 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   1 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   9 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   0 
cpi   :   1 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   1 jmp   :   3 
ld    :  13 ldd   :   0 ldi   : 146 lds   :   9 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  24 movw  :  27 mul   :  18 muls  :   2 mulsu :  12 
neg   :   0 nop   :   0 or    :   0 ori   :   4 out   :   6 pop   :   0 
push  :   0 rcall :   0 ret   :   1 reti  :   1 rjmp  :  13 rol   :   3 
ror   :   0 sbc   :   8 sbci  :   4 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   3 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    : 112 std   :   0 sts   :  14 
sub   :   0 subi  :   5 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 36 out of 113 (31.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004b2   1122      0   1122   32768   3.4%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
